{"version":3,"file":"static/js/774.2cf03125.chunk.js","mappings":"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","sources":["services/UsuarioService.js","services/utils.js","views/app-views/dashboards/perfil/index.js"],"sourcesContent":["import fetch from 'auth/FetchInterceptor'\nimport { normalizePayload } from './utils';\n\nconst UsuarioService = {}\n\nUsuarioService.fetch = function (page, limit, filtro) {\n\tlet apiQuery = `?page=${page}&limit=${limit}`;\n\n\tif (filtro) {\n\t\tconst updatedApiQuery = Object.entries(filtro)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reduce((query, [key,value]) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst normalizedValue = encodeURIComponent(value.replace(/ /g, \"%20\"));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn `${query}&${key}=${normalizedValue}`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}, apiQuery);\n\t\tapiQuery = updatedApiQuery;\n\t}\n\n\treturn fetch.get(`/usuarios${apiQuery}`);\n}\n\nUsuarioService.get = function (id) {\n\tif (!id) { return undefined; }\n\treturn fetch.get(`/usuarios/${id}`);\n}\n\nUsuarioService.buscarTecnicos = function () {\n\treturn fetch.get(`/usuarios/tecnicos`);\n}\n\nUsuarioService.criar = function (data) {\n\tnormalizePayload(data);\n\treturn fetch({\n\t\turl: '/usuarios',\n\t\tmethod: 'post',\n\t\tdata: data\n\t})\n}\n\nUsuarioService.salvar = function (id, data) {\n\tnormalizePayload(data);\n\treturn fetch({\n\t\turl: `/usuarios/${id}`,\n\t\tmethod: 'put',\n\t\tdata: data\n\t})\n}\n\nUsuarioService.ativar = function (id) {\n\treturn fetch({\n\t\turl: `/usuarios/${id}/ativar`,\n\t\tmethod: 'put',\n\t})\n}\n\nUsuarioService.desativar = function (id) {\n\treturn fetch({\n\t\turl: `/usuarios/${id}/desativar`,\n\t\tmethod: 'put',\n\t})\n}\n\nexport default UsuarioService;\n","export const normalizePayload = (formData) => {\n  // remove null values from payload\n  Object.keys(formData).forEach(function(key) {\n    if (formData[key] === null || formData[key] === undefined || formData[key] === '') {\n        delete formData[key];\n    }\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Input, Row, Col, notification } from 'antd';\nimport UsuarioService from 'services/UsuarioService';\nimport { ROW_GUTTER } from 'constants/ThemeConstant';\nimport { useNavigate } from 'react-router-dom';\nimport { AUTH_USER } from 'constants/AuthConstant';\n\nexport const EditProfile = () => {\n  const [usuarioToUpdate, setusuarioToUpdate] = useState(undefined);\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const onFinish = async (values) => {\n    const novoNome = form.getFieldValue('nome');\n    const novoEmail = form.getFieldValue('email');\n    const novaSenha = form.getFieldValue('password');\n\n    let usuarioPayload = {\n      nome: novoNome,\n      email: novoEmail, \n    };\n\n    if (novaSenha) {\n      usuarioPayload.password = novaSenha;\n    }\n\n    try {\n      await UsuarioService.salvar(usuarioToUpdate.id, usuarioPayload);\n\n      const successMessage = `Usuario atualizado`;\n      notification.success({ message: successMessage });\n    }\n    catch (err) {\n      notification.error({\n        message: 'Erro ao atualizar o perfil'\n      });\n    }\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const getUsuarioToUpdate = async (usuarioId) => {\n    try {\n      if (!!usuarioId) {\n        const response = await UsuarioService.get(usuarioId);\n        const usuario = response.data;\n        if (!!usuario) {\n          const allFields = Object.keys(usuario).map((field) => ({\n            name: field,\n            value: usuario[field]\n          }));\n          // remove id, created_at\n          const formFields = allFields.filter(field => (\n            field.name.toLowerCase() !== 'id' &&\n            field.name.toLowerCase() !== 'created_at'\n          ))\n\n          form.setFields(formFields);\n          setusuarioToUpdate(usuario);\n        }\n      }\n    }\n    catch(err) {\n      navigate('/app/administrativo/usuarios');\n      notification.error(`Erro ao buscar o Usuario! ${err}`);\n    }\n  }\n\n  const getLoggedInUser = () => {\n    const loggedInUserRaw = localStorage.getItem(AUTH_USER) || null;\n    if (!!loggedInUserRaw) {\n      const loggedInUser = JSON.parse(loggedInUserRaw);\n      getUsuarioToUpdate(loggedInUser.id);\n    }\n  }\n\n  useEffect(() => {\n\t\tgetLoggedInUser();\n\t}, []);\n\n  return (\n    <>\n      <div className=\"mt-4\">\n        <Form\n          form={form}\n          name=\"register\"\n          layout=\"vertical\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Row>\n            <Col xs={24} sm={24} md={24} lg={16}>\n              <Row gutter={ROW_GUTTER}>\n                <Col xs={24} sm={24} md={12}>\n                  <Form.Item\n                    label=\"Name\"\n                    name=\"nome\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your name!',\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Email\"\n                    name=\"email\"\n                    rules={[{ \n                      required: true,\n                      type: 'email',\n                      message: 'Please enter a valid email!' \n                    }]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"password\"\n                    label=\"Senha\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Por favor insira a senha!',\n                      },\n                    ]}\n                    hasFeedback\n                  >\n                    <Input.Password />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"password-repeat\"\n                    label=\"Confirme a Senha\"\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Por favor confirme a senha!',\n                      },\n                      ({ getFieldValue }) => ({\n                        validator(_, value) {\n                          if (!value || getFieldValue('password') === value) {\n                            return Promise.resolve();\n                          }\n                          return Promise.reject(new Error('As senhas devem ser iguais'));\n                        },\n                      }),\n                    ]}\n                  >\n                    <Input.Password />\n                  </Form.Item>\n                </Col>\n\n              </Row>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Salvar\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    </>\n  )\n}\n\nexport default EditProfile\n"],"names":["UsuarioService","page","limit","filtro","apiQuery","Object","entries","reduce","query","key","value","normalizedValue","encodeURIComponent","replace","fetch","id","data","normalizePayload","url","method","formData","keys","forEach","undefined","EditProfile","useState","usuarioToUpdate","setusuarioToUpdate","Form","form","navigate","useNavigate","onFinish","values","novoNome","getFieldValue","novoEmail","novaSenha","usuarioPayload","nome","email","password","notification","message","getUsuarioToUpdate","usuarioId","response","usuario","allFields","map","field","name","formFields","filter","toLowerCase","setFields","useEffect","loggedInUserRaw","localStorage","getItem","AUTH_USER","loggedInUser","JSON","parse","getLoggedInUser","className","layout","onFinishFailed","errorInfo","console","log","xs","sm","md","lg","gutter","ROW_GUTTER","label","rules","required","type","hasFeedback","dependencies","validator","_","Promise","reject","Error","resolve","htmlType"],"sourceRoot":""}